# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
# For a list of all available actions, check out https://docs.fastlane.tools/actions
# For a list of all available plugins, check out https://docs.fastlane.tools/plugins/available-plugins
#
# Privacy Policy URL for App Store Connect: https://blanxlait.github.io/octo-vocab/privacy-policy.html

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # Ensure we're using the latest version of fastlane
    # update_fastlane
    
    # Verify required environment variables are set
    required_vars = ["APP_STORE_CONNECT_ISSUER_ID", "FASTLANE_TEAM_ID", "MATCH_PASSWORD"]
    required_vars.each do |var|
      UI.user_error!("Environment variable #{var} is required") unless ENV[var]
    end
    
    UI.message "🔑 Using App Store Connect API authentication"
  end

  desc "Create bundle identifier on Apple Developer Portal"
  lane :create_bundle_id do
    UI.message "📱 Creating bundle identifier on Apple Developer Portal..."
    
    begin
      # Try to create bundle identifier using spaceship
      Spaceship::Portal.login
      Spaceship::Portal.select_team
      
      bundle_id = Spaceship::Portal::BundleId.find("com.blanxlait.octo-vocab")
      if bundle_id
        UI.success "Bundle ID already exists!"
      else
        bundle_id = Spaceship::Portal::BundleId.create(
          bundle_id: "com.blanxlait.octo-vocab",
          name: "Octo Vocab"
        )
        UI.success "✅ Bundle ID created successfully!"
      end
    rescue => e
      UI.error "Failed to create bundle ID: #{e.message}"
      # Fall back to produce
      UI.message "Trying alternative approach..."
      
      # Create using environment variables instead
      produce(
        app_identifier: "com.blanxlait.octo-vocab",
        app_name: "Octo Vocab",
        team_id: ENV["FASTLANE_TEAM_ID"],
        skip_itc: true,
        skip_devcenter: false
      )
    end
    
    UI.success "✅ Bundle ID setup completed!"
  end

  desc "Create app on App Store Connect and Developer Portal"
  lane :create_app do
    UI.message "🚀 Creating app on App Store Connect..."
    
    produce(
      app_identifier: "com.blanxlait.octo-vocab",
      app_name: "Octo Vocab",
      language: "English",
      app_version: "1.0",
      sku: "OCTOVOCAB2024",
      team_id: ENV["FASTLANE_TEAM_ID"],
      itc_team_id: ENV["FASTLANE_ITC_TEAM_ID"],
      platforms: ["ios"],
      skip_devcenter: false,
      skip_itc: false
    )
    
    UI.success "✅ App created successfully!"
  end

  desc "Sync certificates and provisioning profiles using match"
  lane :sync_certificates do
    UI.message "📱 Syncing certificates and provisioning profiles using match..."
    
    # Configure Git authentication for private repository access
    if ENV["MATCH_CERTS_PAT"]
      # Use Personal Access Token for private repository authentication
      git_url = ENV["MATCH_GIT_URL"].gsub('https://github.com/', "https://#{ENV["MATCH_CERTS_PAT"]}@github.com/")
      UI.message "🔐 Using Personal Access Token for private repository access"
    else
      git_url = ENV["MATCH_GIT_URL"]
      UI.message "⚠️  No PAT found - using basic Git URL (may fail for private repos)"
    end
    
    # Configure App Store Connect API key for match
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Use match for certificate and provisioning profile management
    # Allow creation of new profiles if MATCH_READONLY is not set to "true"
    match(
      type: "appstore",
      app_identifier: "com.blanxlait.octo-vocab",
      git_url: git_url,
      git_branch: ENV["MATCH_GIT_BRANCH"] || "main",
      readonly: ENV["MATCH_READONLY"] == "true",  # Respect MATCH_READONLY environment variable
      force_for_new_devices: true,
      api_key: api_key
    )
    
    UI.success "✅ Certificates and provisioning profiles synced successfully!"
  end

  desc "Build the iOS app"
  lane :build do |options|
    UI.message "🏗️ Building iOS app..."
    
    # Configure Flutter for release build  
    UI.message "🐦 Configuring Flutter for release..."
    # Build iOS app using existing pub cache (no re-download) with timeout and retry logic
    retry_count = 0
    begin
      Timeout::timeout(600) do # 10 minute timeout
        sh("cd .. && flutter build ios --config-only --release --no-pub")
      end
    rescue Timeout::Error
      UI.user_error!("Flutter build timed out after 10 minutes")
    rescue => e
      retry_count += 1
      if retry_count < 3
        UI.important("Flutter build failed, retrying (#{retry_count}/3)...")
        UI.important("Error: #{e.message}")
        sleep(5) # Brief pause before retry
        retry
      else
        UI.user_error!("Flutter build failed after 3 attempts: #{e.message}")
      end
    end
    
    # Increment build number
    increment_build_number(
      xcodeproj: "Runner.xcodeproj"
    )
    
    # Build the app using match-managed certificates
    UI.message "📱 Building with match-managed certificates..."
    
    # Build the app
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      # Clean build
      clean: true,
      # Flutter specific
      archive_path: "./build/Runner.xcarchive",
      output_directory: "./build",
      # Debugging and performance tracking
      verbose: true,
      build_timing_summary: true,
      analyze_build_time: true,
      # Let match handle the signing automatically
      export_options: {
        method: "app-store",
        teamID: ENV["FASTLANE_TEAM_ID"],
        provisioningProfiles: {
          "com.blanxlait.octo-vocab" => "match AppStore com.blanxlait.octo-vocab"
        }
      }
    )
    
    UI.success "✅ App built successfully!"
  end

  desc "Build app for distribution"
  lane :build_only do
    UI.message "🧪 Building app for distribution..."
    
    # Build the app
    build
    
    UI.success "✅ App built successfully! IPA available at: ./build/Runner.ipa"
  end

  desc "Deploy to TestFlight for beta testing"
  lane :beta do
    UI.message "🧪 Deploying to TestFlight..."
    
    # Build the app
    build
    
    # Configure App Store Connect API for upload only
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      # Beta app information
      changelog: "Privacy-first vocabulary learning app for students.\n\nFeatures:\n• ACTFL-aligned leveling system\n• Offline-first architecture\n• No data collection\n• Latin and Spanish vocabulary\n• Adaptive mobile/tablet UI",
      # Beta testing
      distribute_external: false,
      notify_external_testers: false
    )
    
    UI.success "🎉 App uploaded to TestFlight! Check App Store Connect for processing status."
  end

  desc "Deploy to App Store for production release"
  lane :release do
    UI.message "🚀 Deploying to App Store..."
    
    # Build the app
    build
    
    # Configure App Store Connect API for release
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Upload to App Store with metadata from fastlane/metadata/en-US/
    upload_to_app_store(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      force: true,
      reject_if_possible: true,
      skip_metadata: false,
      skip_screenshots: true,
      skip_binary_upload: false,
      # App Store submission
      submit_for_review: false, # Manual review submission for safety
      automatic_release: false,
      # Privacy and compliance
      submission_information: {
        add_id_info_uses_idfa: false,
        add_id_info_serves_ads: false,
        add_id_info_tracks_action: false,
        add_id_info_tracks_install: false,
        content_rights_has_rights: true,
        content_rights_contains_third_party_content: false,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false
      }
    )
    
    UI.success "🎉 App uploaded to App Store! Go to App Store Connect to submit for review."
  end

  desc "Generate App Store screenshots"
  lane :screenshots do
    UI.message "📸 Generating App Store screenshots..."
    
    # Generate screenshots using UI tests
    capture_screenshots
    
    UI.success "✅ Screenshots generated successfully!"
  end

  desc "Generate and upload App Store screenshots"
  lane :upload_screenshots do
    UI.message "📸 Generating and uploading App Store screenshots..."
    
    # Configure App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Generate screenshots using UI tests
    capture_screenshots
    
    # Upload screenshots to App Store Connect
    deliver(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      skip_binary_upload: true,
      skip_metadata: true,
      skip_screenshots: false,
      overwrite_screenshots: true,
      force: true,
      run_precheck_before_submit: false  # Skip precheck to avoid API key limitations
    )
    
    UI.success "✅ Screenshots generated and uploaded to App Store Connect!"
  end

  desc "Upload existing screenshots to App Store Connect"
  lane :upload_existing_screenshots do
    UI.message "📸 Uploading existing screenshots to App Store Connect..."
    
    # Configure App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Upload existing screenshots to App Store Connect (no generation)
    deliver(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      skip_binary_upload: true,
      skip_metadata: true,
      skip_screenshots: false,
      overwrite_screenshots: true,
      force: true,
      run_precheck_before_submit: false  # Skip precheck to avoid API key limitations
    )
    
    UI.success "✅ Existing screenshots uploaded to App Store Connect!"
  end

  desc "Update App Store metadata and screenshots"
  lane :update_metadata do
    UI.message "📝 Updating App Store Connect metadata..."
    
    # Configure App Store Connect API for metadata upload
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Upload metadata to App Store Connect
    deliver(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      skip_binary_upload: true,
      skip_screenshots: true,
      force: true,
      # Metadata will be read from fastlane/metadata/en-US/ files
      overwrite_screenshots: false
    )
    
    UI.success "✅ App Store metadata updated successfully!"
  end

  desc "Generate screenshots and update metadata"
  lane :update_store_assets do
    UI.message "🎨 Updating all App Store assets..."
    
    # Generate fresh screenshots
    screenshots
    
    # Configure App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
      duration: 1200, # 20 minutes
      in_house: false
    )
    
    # Upload both metadata and screenshots
    deliver(
      api_key: api_key,
      app_identifier: "com.blanxlait.octo-vocab",
      skip_binary_upload: true,
      skip_screenshots: false, # Include screenshots
      force: true,
      overwrite_screenshots: true
    )
    
    UI.success "✅ All App Store assets updated successfully!"
  end

  desc "Setup: Create app and sync certificates (run once)"
  lane :setup do
    UI.message "⚙️ Setting up Octo Vocab for deployment..."
    
    create_app
    sync_certificates
    
    UI.success "🎉 Setup complete! You can now run 'fastlane beta' or 'fastlane release'"
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    UI.success "✅ Lane #{lane} completed successfully!"
  end

  error do |lane, exception|
    UI.error "❌ Lane #{lane} failed with error: #{exception.message}"
    # Add error handling/notifications here if needed
  end
end