name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze

    - name: Run unit tests
      run: ./scripts/test.sh unit --coverage

    - name: Run widget tests
      run: ./scripts/test.sh widget --coverage

    - name: Run integration tests
      run: ./scripts/test.sh integration --coverage

    - name: Run privacy compliance tests
      run: ./scripts/test.sh privacy --coverage

    - name: Generate combined coverage report
      run: ./scripts/test.sh all --coverage --html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/html/

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Build Android APK
      run: flutter build apk --release

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release.apk
        path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Build iOS (no code signing)
      run: flutter build ios --release --no-codesign

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Run dependency security scan
      run: |
        flutter pub deps --json | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | head -20
        echo "✅ Dependency scan completed - manual review recommended for production"

    - name: Verify no hardcoded secrets
      run: |
        if grep -r -i "api[_-]key\|secret\|password\|token" lib/ --exclude-dir=generated --include="*.dart" | grep -v "// ignore" | grep -v "TODO" | head -5; then
          echo "❌ Potential hardcoded secrets found"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

  privacy-audit:
    name: Privacy Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Run privacy compliance tests
      run: ./scripts/test.sh privacy

    - name: Verify no network permissions in Android
      run: |
        if grep -q "android.permission.INTERNET" android/app/src/main/AndroidManifest.xml; then
          echo "⚠️ Internet permission found - verify this is intentional for offline-first app"
        else
          echo "✅ No internet permissions - fully offline app confirmed"
        fi

    - name: Check for analytics/tracking dependencies
      run: |
        if grep -E "(firebase_analytics|google_analytics|mixpanel|amplitude)" pubspec.yaml; then
          echo "❌ Analytics dependencies found - violates privacy-first design"
          exit 1
        else
          echo "✅ No analytics dependencies found"
        fi

    - name: Verify local data storage only
      run: |
        if grep -r -E "(http|https|firebase|supabase|realm)" lib/ --include="*.dart" | grep -v "// ignore" | grep -v "assets/"; then
          echo "⚠️ Network/cloud service references found - manual review needed"
        else
          echo "✅ Local-only data storage confirmed"
        fi