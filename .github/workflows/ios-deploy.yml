name: iOS App Store Deployment

on:
  # Trigger on release creation (e.g., v1.0.0)
  release:
    types: [published]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - release
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      skip_preflight:
        description: 'Skip preflight check (not recommended)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.35.0'
  FLUTTER_CHANNEL: 'stable'

jobs:
  # Run preflight check first
  preflight:
    if: ${{ !inputs.skip_preflight }}
    uses: ./.github/workflows/preflight-check.yml
    secrets: inherit
    
  # Only proceed with deployment if preflight passes
  ios_deploy:
    needs: [preflight]
    if: ${{ always() && (inputs.skip_preflight || needs.preflight.outputs.ready_for_deployment == 'true') }}
    runs-on: macos-15
    timeout-minutes: 45
    
    steps:
    # Show preflight results
    - name: 📋 Preflight Check Results
      if: ${{ !inputs.skip_preflight }}
      run: |
        echo "## 🚀 Preflight Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.preflight.outputs.ready_for_deployment }}" = "true" ]; then
          echo "✅ **Preflight check passed** - proceeding with deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Preflight check failed** - deployment should not proceed" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **This deployment was force-started despite preflight failure**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
    # Checkout code
    - name: 📱 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup Ruby for Fastlane
    - name: 💎 Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    # Install Fastlane
    - name: 🚀 Install Fastlane
      run: |
        gem install fastlane
        fastlane --version

    # Cache Flutter dependencies
    - name: 💾 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}-
          ${{ runner.os }}-flutter-

    # Setup Flutter
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}

    # Cache Flutter precache artifacts (engine binaries, tools)
    - name: 💾 Cache Flutter precache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter/bin/cache/dart-sdk
          ${{ runner.tool_cache }}/flutter/bin/cache/artifacts
        key: ${{ runner.os }}-flutter-precache-${{ env.FLUTTER_VERSION }}-${{ env.FLUTTER_CHANNEL }}
        restore-keys: |
          ${{ runner.os }}-flutter-precache-${{ env.FLUTTER_VERSION }}-
          ${{ runner.os }}-flutter-precache-

    # Precache Flutter artifacts to speed up builds
    - name: 🚀 Flutter Precache
      run: |
        flutter precache --ios --no-web --no-linux --no-windows --no-macos --no-android
        echo "✅ Flutter precache completed"

    # Verify Flutter installation
    - name: 🔍 Flutter Doctor
      run: flutter doctor -v

    # Get Flutter dependencies with timeout
    - name: 📦 Get Flutter dependencies
      timeout-minutes: 10
      run: |
        flutter pub get || {
          echo "⚠️ Flutter pub get failed, retrying..."
          sleep 5
          flutter pub get
        }

    # Cache CocoaPods to avoid re-downloading and building pods
    - name: 💾 Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ios/Pods
          ios/Podfile.lock
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    # Cache Xcode DerivedData for faster incremental builds
    - name: 💾 Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-deriveddata-${{ runner.arch }}-${{ hashFiles('ios/**/*.pbxproj', 'ios/**/*.plist', 'pubspec.yaml', 'pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-xcode-deriveddata-${{ runner.arch }}-
          ${{ runner.os }}-xcode-deriveddata-

    # Cache Flutter build state for incremental builds
    - name: 💾 Cache Flutter build state
      uses: actions/cache@v4
      with:
        path: |
          .dart_tool
          ios/.symlinks
          ios/Flutter/Generated.xcconfig
          ios/Flutter/flutter_export_environment.sh
        key: ${{ runner.os }}-flutter-build-${{ hashFiles('pubspec.yaml', 'pubspec.lock') }}-${{ env.FLUTTER_VERSION }}
        restore-keys: |
          ${{ runner.os }}-flutter-build-${{ hashFiles('pubspec.yaml', 'pubspec.lock') }}-
          ${{ runner.os }}-flutter-build-

    # Check if CI already passed for this commit
    - name: 🔍 Check CI status
      id: ci_check
      if: ${{ !inputs.skip_tests }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Checking CI status for commit ${{ github.sha }}"
        STATUS=$(gh run list --commit ${{ github.sha }} --workflow ci.yml --json conclusion -q '.[0].conclusion' --limit 1)
        echo "CI status: $STATUS"
        if [[ "$STATUS" == "success" ]]; then
          echo "ci_passed=true" >> $GITHUB_OUTPUT
          echo "✅ CI already passed - skipping redundant tests"
        else
          echo "ci_passed=false" >> $GITHUB_OUTPUT
          echo "⚠️ CI not successful - will run tests"
        fi

    # Run comprehensive tests (only if CI didn't pass)
    - name: 🧪 Run comprehensive tests
      if: ${{ !inputs.skip_tests && steps.ci_check.outputs.ci_passed != 'true' }}
      run: |
        # Use same comprehensive test script as CI
        chmod +x ./scripts/test.sh
        ./scripts/test.sh all

    # Configure App Store Connect API using validated values from preflight
    - name: 🔐 Configure App Store Connect API
      env:
        # Use validated values from preflight check when available, fallback to secrets
        APP_STORE_CONNECT_API_KEY_ID: ${{ inputs.skip_preflight && secrets.APP_STORE_CONNECT_API_KEY_ID || needs.preflight.outputs.app_store_api_key_id }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ inputs.skip_preflight && secrets.APP_STORE_CONNECT_ISSUER_ID || needs.preflight.outputs.app_store_issuer_id }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}  # Always from secrets (sensitive)
        FASTLANE_TEAM_ID: ${{ inputs.skip_preflight && secrets.FASTLANE_TEAM_ID || needs.preflight.outputs.fastlane_team_id }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}  # Always from secrets (sensitive)
        MATCH_GIT_URL: ${{ inputs.skip_preflight && secrets.MATCH_GIT_URL || needs.preflight.outputs.match_git_url }}
        MATCH_CERTS_PAT: ${{ secrets.MATCH_CERTS_PAT }}  # Always from secrets (sensitive)
      run: |
        echo "🔐 Using validated configuration from preflight check..."
        if [ "${{ inputs.skip_preflight }}" = "true" ]; then
          echo "⚠️ Using secrets directly (preflight was skipped)"
        else
          echo "✅ Using preflight-validated configuration values"
          echo "   API Key ID: ${APP_STORE_CONNECT_API_KEY_ID:0:8}..."
          echo "   Issuer ID: ${APP_STORE_CONNECT_ISSUER_ID:0:8}..."
          echo "   Team ID: $FASTLANE_TEAM_ID"
        fi
        
        # Export all environment variables for fastlane
        echo "APP_STORE_CONNECT_API_KEY_ID=$APP_STORE_CONNECT_API_KEY_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $GITHUB_ENV
        echo "FASTLANE_TEAM_ID=$FASTLANE_TEAM_ID" >> $GITHUB_ENV
        echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> $GITHUB_ENV
        echo "MATCH_GIT_URL=$MATCH_GIT_URL" >> $GITHUB_ENV
        echo "MATCH_CERTS_PAT=$MATCH_CERTS_PAT" >> $GITHUB_ENV
        
        # Export API key content as multiline environment variable
        echo "APP_STORE_CONNECT_API_KEY_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$APP_STORE_CONNECT_API_KEY_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV





    # Sync certificates and provisioning profiles using Match
    - name: 🔐 Sync certificates with Match
      working-directory: ios
      run: |
        # Configure Git credentials for private repository access
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Run fastlane match to download and install certificates and provisioning profiles
        fastlane sync_certificates

    # Deploy to TestFlight (Beta)
    - name: 🧪 Deploy to TestFlight
      if: ${{ github.event_name == 'release' || inputs.deployment_target == 'beta' }}
      working-directory: ios
      timeout-minutes: 30
      run: |
        fastlane beta
        echo "🎉 Deployed to TestFlight! Check App Store Connect for build processing."

    # Deploy to App Store (Production)
    - name: 🚀 Deploy to App Store
      if: ${{ inputs.deployment_target == 'release' }}
      working-directory: ios
      timeout-minutes: 35
      run: |
        fastlane release
        echo "🎉 Deployed to App Store! Go to App Store Connect to submit for review."

    # Upload build artifacts
    - name: 📁 Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ios/build/*.ipa
          ios/build/*.app.dSYM.zip
          ios/build/Runner.xcarchive
          ios/build/**/*.xcarchive
        retention-days: 30
        if-no-files-found: warn

    # Notify on completion
    - name: 📧 Deployment Summary
      if: always()
      run: |
        echo "## 📱 iOS Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **App**: Octo Vocab (com.blanxlait.octo-vocab)" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ inputs.deployment_target || 'beta' }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Flutter Version**: ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Optimizations**: ✅ Enabled (precache, caching, prebuild)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Performance Optimizations Applied:**" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter engine precaching for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "- CocoaPods dependency caching" >> $GITHUB_STEP_SUMMARY
          echo "- Xcode DerivedData caching for incremental builds" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter build-state caching" >> $GITHUB_STEP_SUMMARY
          echo "- iOS release target prebuild warming" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check [App Store Connect](https://appstoreconnect.apple.com) for build processing" >> $GITHUB_STEP_SUMMARY
          echo "2. Add to TestFlight groups when ready" >> $GITHUB_STEP_SUMMARY
          echo "3. Submit for App Store review when ready" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment failed.** Check the logs above for details." >> $GITHUB_STEP_SUMMARY
        fi