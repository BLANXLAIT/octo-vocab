name: iOS App Store Deployment

on:
  # Trigger on release creation (e.g., v1.0.0)
  release:
    types: [published]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - release
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.35.0'
  FLUTTER_CHANNEL: 'stable'

jobs:
  ios_deploy:
    runs-on: macos-15  # Use latest macOS with Xcode 16+ (required for project compatibility)
    timeout-minutes: 45
    
    steps:
    # Checkout code
    - name: üì± Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup Ruby for Fastlane
    - name: üíé Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    # Install Fastlane
    - name: üöÄ Install Fastlane
      run: |
        gem install fastlane
        fastlane --version

    # Cache Flutter dependencies
    - name: üíæ Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}-
          ${{ runner.os }}-flutter-

    # Setup Flutter
    - name: üê¶ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}

    # Cache Flutter precache artifacts (engine binaries, tools)
    - name: üíæ Cache Flutter precache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.tool_cache }}/flutter/bin/cache/dart-sdk
          ${{ runner.tool_cache }}/flutter/bin/cache/artifacts
        key: ${{ runner.os }}-flutter-precache-${{ env.FLUTTER_VERSION }}-${{ env.FLUTTER_CHANNEL }}
        restore-keys: |
          ${{ runner.os }}-flutter-precache-${{ env.FLUTTER_VERSION }}-
          ${{ runner.os }}-flutter-precache-

    # Precache Flutter artifacts to speed up builds
    - name: üöÄ Flutter Precache
      run: |
        flutter precache --ios --no-web --no-linux --no-windows --no-macos --no-android
        echo "‚úÖ Flutter precache completed"

    # Verify Flutter installation
    - name: üîç Flutter Doctor
      run: flutter doctor -v

    # Get Flutter dependencies with timeout
    - name: üì¶ Get Flutter dependencies
      timeout-minutes: 10
      run: |
        flutter pub get || {
          echo "‚ö†Ô∏è Flutter pub get failed, retrying..."
          sleep 5
          flutter pub get
        }

    # Cache CocoaPods to avoid re-downloading and building pods
    - name: üíæ Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ios/Pods
          ios/Podfile.lock
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    # Cache Xcode DerivedData for faster incremental builds
    - name: üíæ Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-deriveddata-${{ runner.arch }}-${{ hashFiles('ios/**/*.pbxproj', 'ios/**/*.plist', 'pubspec.yaml', 'pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-xcode-deriveddata-${{ runner.arch }}-
          ${{ runner.os }}-xcode-deriveddata-

    # Cache Flutter build state for incremental builds
    - name: üíæ Cache Flutter build state
      uses: actions/cache@v4
      with:
        path: |
          .dart_tool
          ios/.symlinks
          ios/Flutter/Generated.xcconfig
          ios/Flutter/flutter_export_environment.sh
        key: ${{ runner.os }}-flutter-build-${{ hashFiles('pubspec.yaml', 'pubspec.lock') }}-${{ env.FLUTTER_VERSION }}
        restore-keys: |
          ${{ runner.os }}-flutter-build-${{ hashFiles('pubspec.yaml', 'pubspec.lock') }}-
          ${{ runner.os }}-flutter-build-

    # Check if CI already passed for this commit
    - name: üîç Check CI status
      id: ci_check
      if: ${{ !inputs.skip_tests }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Checking CI status for commit ${{ github.sha }}"
        STATUS=$(gh run list --commit ${{ github.sha }} --workflow ci.yml --json conclusion -q '.[0].conclusion' --limit 1)
        echo "CI status: $STATUS"
        if [[ "$STATUS" == "success" ]]; then
          echo "ci_passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ CI already passed - skipping redundant tests"
        else
          echo "ci_passed=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è CI not successful - will run tests"
        fi

    # Run comprehensive tests (only if CI didn't pass)
    - name: üß™ Run comprehensive tests
      if: ${{ !inputs.skip_tests && steps.ci_check.outputs.ci_passed != 'true' }}
      run: |
        # Use same comprehensive test script as CI
        chmod +x ./scripts/test.sh
        ./scripts/test.sh all

    # Configure App Store Connect API
    - name: üîê Configure App Store Connect API
      working-directory: ios
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        # Export environment variables for fastlane
        # Use key content directly instead of file path to avoid JSON parsing issues
        echo "APP_STORE_CONNECT_API_KEY_ID=$APP_STORE_CONNECT_API_KEY_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $GITHUB_ENV
        
        # Export the raw API key content (decode if base64 encoded)
        if echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > /dev/null 2>&1; then
          echo "üîç API key is base64 encoded - decoding for environment variable..."
          API_KEY_CONTENT=$(echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode)
        else
          echo "üîç API key is plain text - using directly..."
          API_KEY_CONTENT="$APP_STORE_CONNECT_API_KEY"
        fi
        
        # Export API key content as environment variable for fastlane
        # Use multiline environment variable format
        echo "APP_STORE_CONNECT_API_KEY_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$API_KEY_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Configure Match (certificate management)
    - name: üìú Configure Match certificates
      working-directory: ios
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BRANCH: ${{ secrets.MATCH_GIT_BRANCH }}
        # Hardcode team IDs since they're fixed for this Apple Developer account
        FASTLANE_TEAM_ID: "GCRLV5UC4Q"
        FASTLANE_ITC_TEAM_ID: "GCRLV5UC4Q"  # Usually same as team ID for individual/LLC accounts
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        # Personal Access Token for accessing the match certificates repo
        MATCH_CERTS_PAT: ${{ secrets.MATCH_CERTS_PAT }}
      run: |
        # Export all environment variables
        echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> $GITHUB_ENV
        echo "MATCH_GIT_URL=$MATCH_GIT_URL" >> $GITHUB_ENV
        echo "MATCH_GIT_BRANCH=$MATCH_GIT_BRANCH" >> $GITHUB_ENV
        echo "FASTLANE_TEAM_ID=$FASTLANE_TEAM_ID" >> $GITHUB_ENV
        echo "FASTLANE_ITC_TEAM_ID=$FASTLANE_ITC_TEAM_ID" >> $GITHUB_ENV
        echo "FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD" >> $GITHUB_ENV
        echo "MATCH_CERTS_PAT=$MATCH_CERTS_PAT" >> $GITHUB_ENV
        echo "MATCH_READONLY=false" >> $GITHUB_ENV

    # Validate secrets are available
    - name: üîç Validate secrets
      run: |
        echo "Checking required secrets availability..."
        if [ -z "${{ secrets.MATCH_PASSWORD }}" ]; then
          echo "‚ùå MATCH_PASSWORD secret is missing"
          exit 1
        else
          echo "‚úÖ MATCH_PASSWORD is available"
        fi
        
        if [ -z "${{ secrets.MATCH_GIT_URL }}" ]; then
          echo "‚ùå MATCH_GIT_URL secret is missing"
          exit 1
        else
          echo "‚úÖ MATCH_GIT_URL is available"
        fi
        
        if [ -z "${{ secrets.MATCH_CERTS_PAT }}" ]; then
          echo "‚ùå MATCH_CERTS_PAT secret is missing"
          exit 1
        else
          echo "‚úÖ MATCH_CERTS_PAT is available"
        fi
        
        if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
          echo "‚ùå APP_STORE_CONNECT_API_KEY_ID secret is missing"
          exit 1
        else
          echo "‚úÖ APP_STORE_CONNECT_API_KEY_ID is available"
        fi
        
        echo "‚úÖ All required secrets are available"

    # Prebuild iOS release target to warm up build system and cache artifacts
    - name: üî® Prebuild iOS Release Target
      timeout-minutes: 15
      run: |
        echo "üî® Starting iOS prebuild to warm up build system..."
        
        # Build iOS without code signing to prepare most build artifacts
        flutter build ios \
          --release \
          --no-codesign \
          --build-name=1.0.0 \
          --build-number=1 \
          --verbose || {
            echo "‚ö†Ô∏è Prebuild failed, but this is not critical - continuing..."
            echo "This may happen on first runs or cache misses"
          }
        
        echo "‚úÖ iOS prebuild completed - build system warmed up"

    # Install CocoaPods dependencies if needed (utilizes cache)
    - name: üç´ Install CocoaPods Dependencies
      working-directory: ios
      run: |
        echo "üç´ Installing CocoaPods dependencies..."
        
        # Check if Pods directory exists and Podfile.lock matches
        if [ ! -d "Pods" ] || [ "Podfile" -nt "Podfile.lock" ]; then
          echo "üì¶ Running pod install..."
          pod install --repo-update
        else
          echo "‚úÖ CocoaPods dependencies are up to date"
        fi

    # Sync certificates and provisioning profiles using Match
    - name: üîê Sync certificates with Match
      working-directory: ios
      run: |
        # Configure Git credentials for private repository access
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Run fastlane match to download and install certificates and provisioning profiles
        fastlane sync_certificates

    # Deploy to TestFlight (Beta)
    - name: üß™ Deploy to TestFlight
      if: ${{ github.event_name == 'release' || inputs.deployment_target == 'beta' }}
      working-directory: ios
      timeout-minutes: 30
      run: |
        fastlane beta
        echo "üéâ Deployed to TestFlight! Check App Store Connect for build processing."

    # Deploy to App Store (Production)
    - name: üöÄ Deploy to App Store
      if: ${{ inputs.deployment_target == 'release' }}
      working-directory: ios
      timeout-minutes: 35
      run: |
        fastlane release
        echo "üéâ Deployed to App Store! Go to App Store Connect to submit for review."

    # Upload build artifacts
    - name: üìÅ Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ios/build/*.ipa
          ios/build/*.app.dSYM.zip
          ios/build/Runner.xcarchive
          ios/build/**/*.xcarchive
        retention-days: 30
        if-no-files-found: warn

    # Notify on completion
    - name: üìß Deployment Summary
      if: always()
      run: |
        echo "## üì± iOS Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **App**: Octo Vocab (com.blanxlait.octo-vocab)" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ inputs.deployment_target || 'beta' }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Flutter Version**: ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Optimizations**: ‚úÖ Enabled (precache, caching, prebuild)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Performance Optimizations Applied:**" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter engine precaching for faster builds" >> $GITHUB_STEP_SUMMARY
          echo "- CocoaPods dependency caching" >> $GITHUB_STEP_SUMMARY
          echo "- Xcode DerivedData caching for incremental builds" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter build-state caching" >> $GITHUB_STEP_SUMMARY
          echo "- iOS release target prebuild warming" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check [App Store Connect](https://appstoreconnect.apple.com) for build processing" >> $GITHUB_STEP_SUMMARY
          echo "2. Add to TestFlight groups when ready" >> $GITHUB_STEP_SUMMARY
          echo "3. Submit for App Store review when ready" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Deployment failed.** Check the logs above for details." >> $GITHUB_STEP_SUMMARY
        fi