name: Preflight Check

on:
  # Manual trigger
  workflow_dispatch:
  
  # Run before any deployment attempt
  workflow_call:
    outputs:
      ready_for_deployment:
        description: 'Whether the preflight check passed and deployment is safe'
        value: ${{ jobs.preflight.outputs.ready }}
        
  # Run on pull requests that modify deployment files
  pull_request:
    paths:
      - '.github/workflows/ios-deploy.yml'
      - '.github/workflows/test-auth.yml'
      - 'ios/fastlane/**'
      
  # Run weekly to catch secret expirations
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC

env:
  FLUTTER_VERSION: '3.35.0'
  FLUTTER_CHANNEL: 'stable'

jobs:
  preflight:
    runs-on: macos-15
    timeout-minutes: 15
    name: 🚀 Preflight Check
    outputs:
      ready: ${{ steps.final_check.outputs.ready }}
      # Export validated environment variables for use by dependent workflows
      app_store_api_key_id: ${{ steps.export_validated.outputs.app_store_api_key_id }}
      app_store_issuer_id: ${{ steps.export_validated.outputs.app_store_issuer_id }}
      fastlane_team_id: ${{ steps.export_validated.outputs.fastlane_team_id }}
      match_git_url: ${{ steps.export_validated.outputs.match_git_url }}
      # Note: Sensitive values like API key content and passwords are not exported
      # They must still be accessed from secrets, but we validate they work first
    
    steps:
    - name: 📱 Checkout repository
      uses: actions/checkout@v4

    - name: 💎 Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: 🚀 Install Fastlane
      run: |
        gem install fastlane
        fastlane --version

    # STEP 1: Validate Secret Existence and Format
    - name: 🔍 Validate Organization Secrets
      id: validate_secrets
      run: |
        echo "## 🔐 Secret Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        VALIDATION_PASSED=true
        
        # Check APP_STORE_CONNECT_API_KEY_ID
        if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
          echo "❌ APP_STORE_CONNECT_API_KEY_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_API_KEY_ID is missing"
          VALIDATION_PASSED=false
        else
          echo "✅ APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ APP_STORE_CONNECT_API_KEY_ID is configured"
        fi
        
        # Check APP_STORE_CONNECT_ISSUER_ID
        if [ -z "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" ]; then
          echo "❌ APP_STORE_CONNECT_ISSUER_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_ISSUER_ID is missing"
          VALIDATION_PASSED=false
        else
          echo "✅ APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ APP_STORE_CONNECT_ISSUER_ID is configured"
        fi
        
        # Check APP_STORE_CONNECT_API_KEY_CONTENT
        if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" ]; then
          echo "❌ APP_STORE_CONNECT_API_KEY_CONTENT is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_API_KEY_CONTENT is missing"
          VALIDATION_PASSED=false
        else
          # Validate it looks like a P8 key
          if [[ "${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" == *"BEGIN PRIVATE KEY"* ]]; then
            echo "✅ APP_STORE_CONNECT_API_KEY_CONTENT: Valid P8 format" >> $GITHUB_STEP_SUMMARY
            echo "✅ APP_STORE_CONNECT_API_KEY_CONTENT is configured and valid"
          else
            echo "⚠️ APP_STORE_CONNECT_API_KEY_CONTENT: Present but format unclear" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ APP_STORE_CONNECT_API_KEY_CONTENT format may be invalid"
            VALIDATION_PASSED=false
          fi
        fi
        
        # Check FASTLANE_TEAM_ID
        if [ -z "${{ secrets.FASTLANE_TEAM_ID }}" ]; then
          echo "❌ FASTLANE_TEAM_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ FASTLANE_TEAM_ID is missing"
          VALIDATION_PASSED=false
        else
          echo "✅ FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ FASTLANE_TEAM_ID is configured"
        fi
        
        # Check Match secrets
        for secret in "MATCH_PASSWORD" "MATCH_GIT_URL" "MATCH_CERTS_PAT"; do
          secret_var="secrets.$secret"
          if [ -z "$(eval echo \${{ $secret_var }})" ]; then
            echo "❌ $secret is missing" >> $GITHUB_STEP_SUMMARY
            echo "❌ $secret is missing"
            VALIDATION_PASSED=false
          else
            echo "✅ $secret: Configured" >> $GITHUB_STEP_SUMMARY
            echo "✅ $secret is configured"
          fi
        done
        
        # Validate GitHub PAT format
        if [[ "${{ secrets.MATCH_CERTS_PAT }}" == ghp_* ]] || [[ "${{ secrets.MATCH_CERTS_PAT }}" == gho_* ]]; then
          echo "✅ MATCH_CERTS_PAT: Valid GitHub token format" >> $GITHUB_STEP_SUMMARY
          echo "✅ MATCH_CERTS_PAT has valid format"
        else
          echo "⚠️ MATCH_CERTS_PAT: Present but format unclear" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ MATCH_CERTS_PAT format may be invalid"
          VALIDATION_PASSED=false
        fi
        
        echo "secrets_valid=$VALIDATION_PASSED" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "$VALIDATION_PASSED" = "true" ]; then
          echo "✅ **All secrets are properly configured**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secret validation failed - see errors above**" >> $GITHUB_STEP_SUMMARY
        fi

    # STEP 2: Configure Environment for API Testing
    - name: 🔐 Configure Environment
      if: steps.validate_secrets.outputs.secrets_valid == 'true'
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_CERTS_PAT: ${{ secrets.MATCH_CERTS_PAT }}
      run: |
        # Export environment variables for fastlane
        echo "APP_STORE_CONNECT_API_KEY_ID=$APP_STORE_CONNECT_API_KEY_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_ISSUER_ID=$APP_STORE_CONNECT_ISSUER_ID" >> $GITHUB_ENV
        echo "FASTLANE_TEAM_ID=$FASTLANE_TEAM_ID" >> $GITHUB_ENV
        echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> $GITHUB_ENV
        echo "MATCH_GIT_URL=$MATCH_GIT_URL" >> $GITHUB_ENV
        echo "MATCH_CERTS_PAT=$MATCH_CERTS_PAT" >> $GITHUB_ENV
        
        # Export API key content as multiline environment variable
        echo "APP_STORE_CONNECT_API_KEY_CONTENT<<EOF" >> $GITHUB_ENV
        echo "$APP_STORE_CONNECT_API_KEY_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # STEP 3: Test App Store Connect API
    - name: 🧪 Test App Store Connect API
      id: test_api
      if: steps.validate_secrets.outputs.secrets_valid == 'true'
      working-directory: ios
      run: |
        echo "🔍 Testing App Store Connect API authentication..."
        echo "## 🍎 App Store Connect API Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if fastlane test_auth; then
          echo "api_test_passed=true" >> $GITHUB_OUTPUT
          echo "✅ **API Authentication Successful**" >> $GITHUB_STEP_SUMMARY
          echo "- App Store Connect API key is valid and working" >> $GITHUB_STEP_SUMMARY
        else
          echo "api_test_passed=false" >> $GITHUB_OUTPUT
          echo "❌ **API Authentication Failed**" >> $GITHUB_STEP_SUMMARY
          echo "- App Store Connect API key is invalid or expired" >> $GITHUB_STEP_SUMMARY
          echo "- Check key expiration date in App Store Connect" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    # STEP 4: Test Match Repository Access
    - name: 📜 Test Match Repository Access
      id: test_repo
      if: steps.validate_secrets.outputs.secrets_valid == 'true'
      working-directory: ios
      run: |
        echo "🔍 Testing Match certificate repository access..."
        
        # Configure Git credentials
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        echo "## 📦 Match Repository Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if MATCH_READONLY=true fastlane sync_certificates; then
          echo "repo_test_passed=true" >> $GITHUB_OUTPUT
          echo "✅ **Repository Access Successful**" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub PAT has proper repository access" >> $GITHUB_STEP_SUMMARY
          echo "- Certificate repository clone and decrypt working" >> $GITHUB_STEP_SUMMARY
        else
          echo "repo_test_passed=false" >> $GITHUB_OUTPUT
          echo "❌ **Repository Access Failed**" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub PAT may be invalid or lack permissions" >> $GITHUB_STEP_SUMMARY
          echo "- Certificate repository may be inaccessible" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    # STEP 5: Test Certificate Validation (Full API Test)
    - name: 🔒 Test Certificate Validation
      id: test_validation
      if: steps.validate_secrets.outputs.secrets_valid == 'true' && steps.test_api.outputs.api_test_passed == 'true' && steps.test_repo.outputs.repo_test_passed == 'true'
      working-directory: ios
      run: |
        echo "🔍 Testing Match certificate validation with Apple API..."
        echo "## 🔐 Certificate Validation Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if fastlane sync_certificates; then
          echo "validation_test_passed=true" >> $GITHUB_OUTPUT
          echo "✅ **Certificate Validation Successful**" >> $GITHUB_STEP_SUMMARY
          echo "- Certificates are valid on Apple's servers" >> $GITHUB_STEP_SUMMARY
          echo "- Apple API authentication working for certificate operations" >> $GITHUB_STEP_SUMMARY
        else
          echo "validation_test_passed=false" >> $GITHUB_OUTPUT
          echo "❌ **Certificate Validation Failed**" >> $GITHUB_STEP_SUMMARY
          echo "- Certificates may be expired or invalid" >> $GITHUB_STEP_SUMMARY
          echo "- Apple API authentication failed during validation" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    # STEP 6: Export Validated Environment Variables
    - name: 📤 Export Validated Environment Variables
      id: export_validated
      if: steps.validate_secrets.outputs.secrets_valid == 'true'
      run: |
        echo "Exporting validated environment variables for dependent workflows..."
        
        # Export non-sensitive validated values (sensitive values still come from secrets)
        echo "app_store_api_key_id=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_OUTPUT
        echo "app_store_issuer_id=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" >> $GITHUB_OUTPUT
        echo "fastlane_team_id=${{ secrets.FASTLANE_TEAM_ID }}" >> $GITHUB_OUTPUT
        echo "match_git_url=${{ secrets.MATCH_GIT_URL }}" >> $GITHUB_OUTPUT
        
        echo "✅ Validated environment variables exported for deployment workflow"

    # STEP 7: Final Assessment
    - name: ✅ Final Deployment Readiness Assessment
      id: final_check
      if: always()
      run: |
        echo "## 🚀 Deployment Readiness Assessment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check all test results
        SECRETS_VALID="${{ steps.validate_secrets.outputs.secrets_valid }}"
        API_PASSED="${{ steps.test_api.outputs.api_test_passed }}"
        REPO_PASSED="${{ steps.test_repo.outputs.repo_test_passed }}"
        VALIDATION_PASSED="${{ steps.test_validation.outputs.validation_test_passed }}"
        
        echo "### Test Results Summary:" >> $GITHUB_STEP_SUMMARY
        echo "- **Secret Validation**: ${SECRETS_VALID:-false}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Authentication**: ${API_PASSED:-false}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Repository Access**: ${REPO_PASSED:-false}" >> $GITHUB_STEP_SUMMARY
        echo "- **Certificate Validation**: ${VALIDATION_PASSED:-false}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$SECRETS_VALID" = "true" ] && [ "$API_PASSED" = "true" ] && [ "$REPO_PASSED" = "true" ] && [ "$VALIDATION_PASSED" = "true" ]; then
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "🎉 **✅ READY FOR DEPLOYMENT** 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All preflight checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- All secrets are properly configured" >> $GITHUB_STEP_SUMMARY
          echo "- App Store Connect API authentication working" >> $GITHUB_STEP_SUMMARY
          echo "- Certificate repository access confirmed" >> $GITHUB_STEP_SUMMARY
          echo "- Apple certificate validation successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🚀 Safe to proceed with iOS deployment workflow**" >> $GITHUB_STEP_SUMMARY
        else
          echo "ready=false" >> $GITHUB_OUTPUT
          echo "🚨 **❌ NOT READY FOR DEPLOYMENT** 🚨" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more preflight checks failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Action Required:" >> $GITHUB_STEP_SUMMARY
          if [ "$SECRETS_VALID" != "true" ]; then
            echo "- ❌ Fix missing or invalid organization secrets" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$API_PASSED" != "true" ]; then
            echo "- ❌ Generate new App Store Connect API key" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$REPO_PASSED" != "true" ]; then
            echo "- ❌ Update GitHub Personal Access Token" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$VALIDATION_PASSED" != "true" ]; then
            echo "- ❌ Check certificate expiration and Apple API access" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ DO NOT attempt deployment until all issues are resolved**" >> $GITHUB_STEP_SUMMARY
        fi