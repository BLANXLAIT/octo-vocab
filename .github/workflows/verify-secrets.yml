name: Verify Organization Secrets

on:
  # Manual trigger
  workflow_dispatch:
  
  # Run on pull requests that modify iOS deployment files
  pull_request:
    paths:
      - '.github/workflows/ios-deploy.yml'
      - 'ios/fastlane/**'
      
  # Run weekly to catch secret expirations
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC

jobs:
  verify_secrets:
    runs-on: ubuntu-latest
    name: 🔐 Verify Organization Secrets
    
    steps:
    - name: 📱 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Verify App Store Connect secrets
      run: |
        echo "## 🔐 App Store Connect API Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check APP_STORE_CONNECT_API_KEY_ID
        if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
          echo "❌ APP_STORE_CONNECT_API_KEY_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_API_KEY_ID is missing"
          exit 1
        else
          echo "✅ APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ APP_STORE_CONNECT_API_KEY_ID is configured"
        fi
        
        # Check APP_STORE_CONNECT_ISSUER_ID
        if [ -z "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" ]; then
          echo "❌ APP_STORE_CONNECT_ISSUER_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_ISSUER_ID is missing"
          exit 1
        else
          echo "✅ APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ APP_STORE_CONNECT_ISSUER_ID is configured"
        fi
        
        # Check APP_STORE_CONNECT_API_KEY_CONTENT
        if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" ]; then
          echo "❌ APP_STORE_CONNECT_API_KEY_CONTENT is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ APP_STORE_CONNECT_API_KEY_CONTENT is missing"
          exit 1
        else
          # Validate it looks like a P8 key
          if [[ "${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" == *"BEGIN PRIVATE KEY"* ]]; then
            echo "✅ APP_STORE_CONNECT_API_KEY_CONTENT: Valid P8 format" >> $GITHUB_STEP_SUMMARY
            echo "✅ APP_STORE_CONNECT_API_KEY_CONTENT is configured and valid"
          else
            echo "⚠️ APP_STORE_CONNECT_API_KEY_CONTENT: Present but format unclear" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ APP_STORE_CONNECT_API_KEY_CONTENT format may be invalid"
          fi
        fi

    - name: 🔍 Verify Fastlane team secrets
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Fastlane Team Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check FASTLANE_TEAM_ID
        if [ -z "${{ secrets.FASTLANE_TEAM_ID }}" ]; then
          echo "❌ FASTLANE_TEAM_ID is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ FASTLANE_TEAM_ID is missing"
          exit 1
        else
          echo "✅ FASTLANE_TEAM_ID: ${{ secrets.FASTLANE_TEAM_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ FASTLANE_TEAM_ID is configured"
        fi

    - name: 🔍 Verify Match certificate secrets
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📜 Match Certificate Management" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check MATCH_PASSWORD
        if [ -z "${{ secrets.MATCH_PASSWORD }}" ]; then
          echo "❌ MATCH_PASSWORD is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ MATCH_PASSWORD is missing"
          exit 1
        else
          echo "✅ MATCH_PASSWORD: Configured (hidden)" >> $GITHUB_STEP_SUMMARY
          echo "✅ MATCH_PASSWORD is configured"
        fi
        
        # Check MATCH_GIT_URL
        if [ -z "${{ secrets.MATCH_GIT_URL }}" ]; then
          echo "❌ MATCH_GIT_URL is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ MATCH_GIT_URL is missing"
          exit 1
        else
          echo "✅ MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ MATCH_GIT_URL is configured"
        fi
        
        # Check MATCH_CERTS_PAT
        if [ -z "${{ secrets.MATCH_CERTS_PAT }}" ]; then
          echo "❌ MATCH_CERTS_PAT is missing" >> $GITHUB_STEP_SUMMARY
          echo "❌ MATCH_CERTS_PAT is missing"
          exit 1
        else
          # Validate it looks like a GitHub token
          if [[ "${{ secrets.MATCH_CERTS_PAT }}" == ghp_* ]] || [[ "${{ secrets.MATCH_CERTS_PAT }}" == gho_* ]]; then
            echo "✅ MATCH_CERTS_PAT: Valid GitHub token format" >> $GITHUB_STEP_SUMMARY
            echo "✅ MATCH_CERTS_PAT is configured and valid format"
          else
            echo "⚠️ MATCH_CERTS_PAT: Present but format unclear" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ MATCH_CERTS_PAT format may be invalid"
          fi
        fi

    - name: ✅ Secrets verification complete
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎉 Verification Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All required organization secrets are properly configured for iOS deployment!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Ready to run iOS deployment workflows" >> $GITHUB_STEP_SUMMARY
        echo "- Secrets are available to all repositories in the BLANXLAIT organization" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All organization secrets verified successfully!"